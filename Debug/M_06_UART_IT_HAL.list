
M_06_UART_IT_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000402c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041fc  080041fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004204  08004204  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800420c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08004218  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08004218  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c128  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d2e  00000000  00000000  0002c1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002ded8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000770  00000000  00000000  0002e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e64  00000000  00000000  0002f000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c3da  00000000  00000000  00054e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e94f7  00000000  00000000  0006123e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026c8  00000000  00000000  0014a738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b4  00000000  00000000  0014ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800419c 	.word	0x0800419c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800419c 	.word	0x0800419c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_UART_RxCpltCallback>:
{
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
  return len;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2120      	movs	r1, #32
 80004d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d4:	f000 ff84 	bl	80013e0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, my_str, sizeof(my_str), 1);// Ver el mensaje que acabo de recibir
 80004d8:	2301      	movs	r3, #1
 80004da:	2204      	movs	r2, #4
 80004dc:	4906      	ldr	r1, [pc, #24]	; (80004f8 <HAL_UART_RxCpltCallback+0x34>)
 80004de:	4807      	ldr	r0, [pc, #28]	; (80004fc <HAL_UART_RxCpltCallback+0x38>)
 80004e0:	f002 fb04 	bl	8002aec <HAL_UART_Transmit>
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	HAL_UART_Receive_IT(&huart2, my_str, 4);
 80004e4:	2204      	movs	r2, #4
 80004e6:	4904      	ldr	r1, [pc, #16]	; (80004f8 <HAL_UART_RxCpltCallback+0x34>)
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <HAL_UART_RxCpltCallback+0x38>)
 80004ea:	f002 fb93 	bl	8002c14 <HAL_UART_Receive_IT>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200000f4 	.word	0x200000f4
 80004fc:	20000028 	.word	0x20000028

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa4e 	bl	80009a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f810 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8ae 	bl	800066c <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 f88e 	bl	8000630 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f85c 	bl	80005d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, my_str, 4);
 8000518:	2204      	movs	r2, #4
 800051a:	4902      	ldr	r1, [pc, #8]	; (8000524 <main+0x24>)
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <main+0x28>)
 800051e:	f002 fb79 	bl	8002c14 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x22>
 8000524:	200000f4 	.word	0x200000f4
 8000528:	20000028 	.word	0x20000028

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fe01 	bl	8004142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000552:	f000 ff6b 	bl	800142c <HAL_PWREx_ControlVoltageScaling>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800055c:	f000 f8ec 	bl	8000738 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000568:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2310      	movs	r3, #16
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057a:	230a      	movs	r3, #10
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4618      	mov	r0, r3
 8000590:	f000 ffa2 	bl	80014d8 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800059a:	f000 f8cd 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2303      	movs	r3, #3
 80005a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	2104      	movs	r1, #4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fb6a 	bl	8001c90 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c2:	f000 f8b9 	bl	8000738 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3758      	adds	r7, #88	; 0x58
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <MX_USART2_UART_Init+0x5c>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000614:	f002 fa1c 	bl	8002a50 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061e:	f000 f88b 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000028 	.word	0x20000028
 800062c:	40004400 	.word	0x40004400

08000630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_DMA_Init+0x38>)
 8000638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <MX_DMA_Init+0x38>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6493      	str	r3, [r2, #72]	; 0x48
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_DMA_Init+0x38>)
 8000644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2011      	movs	r0, #17
 8000654:	f000 fafd 	bl	8000c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000658:	2011      	movs	r0, #17
 800065a:	f000 fb16 	bl	8000c8a <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <MX_GPIO_Init+0xc4>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <MX_GPIO_Init+0xc4>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <MX_GPIO_Init+0xc4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <MX_GPIO_Init+0xc4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a24      	ldr	r2, [pc, #144]	; (8000730 <MX_GPIO_Init+0xc4>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_GPIO_Init+0xc4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_GPIO_Init+0xc4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <MX_GPIO_Init+0xc4>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_GPIO_Init+0xc4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_GPIO_Init+0xc4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <MX_GPIO_Init+0xc4>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_GPIO_Init+0xc4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f000 fe79 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <MX_GPIO_Init+0xc8>)
 8000706:	f000 fcc1 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800070a:	2320      	movs	r3, #32
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f000 fcb2 	bl	800108c <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	48000800 	.word	0x48000800

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x44>)
 800074c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x44>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6613      	str	r3, [r2, #96]	; 0x60
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x44>)
 8000758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_MspInit+0x44>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_MspInit+0x44>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	6593      	str	r3, [r2, #88]	; 0x58
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_MspInit+0x44>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0ac      	sub	sp, #176	; 0xb0
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2288      	movs	r2, #136	; 0x88
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fcc8 	bl	8004142 <memset>
  if(huart->Instance==USART2)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a3a      	ldr	r2, [pc, #232]	; (80008a0 <HAL_UART_MspInit+0x114>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d16c      	bne.n	8000896 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007bc:	2302      	movs	r3, #2
 80007be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fc85 	bl	80020d8 <HAL_RCCEx_PeriphCLKConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007d4:	f7ff ffb0 	bl	8000738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <HAL_UART_MspInit+0x118>)
 80007da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <HAL_UART_MspInit+0x118>)
 80007de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e2:	6593      	str	r3, [r2, #88]	; 0x58
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <HAL_UART_MspInit+0x118>)
 80007e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <HAL_UART_MspInit+0x118>)
 80007f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f4:	4a2b      	ldr	r2, [pc, #172]	; (80008a4 <HAL_UART_MspInit+0x118>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <HAL_UART_MspInit+0x118>)
 80007fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000808:	230c      	movs	r3, #12
 800080a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000820:	2307      	movs	r3, #7
 8000822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f000 fc2c 	bl	800108c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 8000836:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <HAL_UART_MspInit+0x120>)
 8000838:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 800083c:	2202      	movs	r2, #2
 800083e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 8000842:	2210      	movs	r2, #16
 8000844:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800086a:	480f      	ldr	r0, [pc, #60]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 800086c:	f000 fa28 	bl	8000cc0 <HAL_DMA_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000876:	f7ff ff5f 	bl	8000738 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 800087e:	66da      	str	r2, [r3, #108]	; 0x6c
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <HAL_UART_MspInit+0x11c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2026      	movs	r0, #38	; 0x26
 800088c:	f000 f9e1 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000890:	2026      	movs	r0, #38	; 0x26
 8000892:	f000 f9fa 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	37b0      	adds	r7, #176	; 0xb0
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40021000 	.word	0x40021000
 80008a8:	200000ac 	.word	0x200000ac
 80008ac:	40020080 	.word	0x40020080

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f8ae 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <DMA1_Channel7_IRQHandler+0x10>)
 800090a:	f000 fb10 	bl	8000f2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000ac 	.word	0x200000ac

08000918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART2_IRQHandler+0x10>)
 800091e:	f002 f9cf 	bl	8002cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000028 	.word	0x20000028

0800092c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <Reset_Handler>:
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopForever+0x2>
 8000954:	f7ff ffea 	bl	800092c <SystemInit>
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopForever+0x6>)
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopForever+0xa>)
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopForever+0xe>)
 800095e:	2300      	movs	r3, #0
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:
 8000962:	58d4      	ldr	r4, [r2, r3]
 8000964:	50c4      	str	r4, [r0, r3]
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:
 8000968:	18c4      	adds	r4, r0, r3
 800096a:	428c      	cmp	r4, r1
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopForever+0x12>)
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopForever+0x16>)
 8000972:	2300      	movs	r3, #0
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:
 800097a:	42a2      	cmp	r2, r4
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>
 800097e:	f003 fbe9 	bl	8004154 <__libc_init_array>
 8000982:	f7ff fdbd 	bl	8000500 <main>

08000986 <LoopForever>:
 8000986:	e7fe      	b.n	8000986 <LoopForever>
 8000988:	20018000 	.word	0x20018000
 800098c:	20000000 	.word	0x20000000
 8000990:	2000000c 	.word	0x2000000c
 8000994:	0800420c 	.word	0x0800420c
 8000998:	2000000c 	.word	0x2000000c
 800099c:	200000fc 	.word	0x200000fc

080009a0 <ADC1_2_IRQHandler>:
 80009a0:	e7fe      	b.n	80009a0 <ADC1_2_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_Init+0x3c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <HAL_Init+0x3c>)
 80009b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ba:	2003      	movs	r0, #3
 80009bc:	f000 f93e 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 f80f 	bl	80009e4 <HAL_InitTick>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	e001      	b.n	80009d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009d2:	f7ff feb7 	bl	8000744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40022000 	.word	0x40022000

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_InitTick+0x6c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d023      	beq.n	8000a40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_InitTick+0x70>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_InitTick+0x6c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f949 	bl	8000ca6 <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10f      	bne.n	8000a3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d809      	bhi.n	8000a34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f913 	bl	8000c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_InitTick+0x74>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	e007      	b.n	8000a44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e004      	b.n	8000a44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	73fb      	strb	r3, [r7, #15]
 8000a3e:	e001      	b.n	8000a44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200000f8 	.word	0x200000f8

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200000f8 	.word	0x200000f8

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff8e 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff29 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff3e 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff8e 	bl	8000b90 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff31 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e098      	b.n	8000e04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b4d      	ldr	r3, [pc, #308]	; (8000e10 <HAL_DMA_Init+0x150>)
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d80f      	bhi.n	8000cfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b4b      	ldr	r3, [pc, #300]	; (8000e14 <HAL_DMA_Init+0x154>)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a4b      	ldr	r2, [pc, #300]	; (8000e18 <HAL_DMA_Init+0x158>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	009a      	lsls	r2, r3, #2
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <HAL_DMA_Init+0x15c>)
 8000cfa:	641a      	str	r2, [r3, #64]	; 0x40
 8000cfc:	e00e      	b.n	8000d1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <HAL_DMA_Init+0x160>)
 8000d06:	4413      	add	r3, r2
 8000d08:	4a43      	ldr	r2, [pc, #268]	; (8000e18 <HAL_DMA_Init+0x158>)
 8000d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	009a      	lsls	r2, r3, #2
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a42      	ldr	r2, [pc, #264]	; (8000e24 <HAL_DMA_Init+0x164>)
 8000d1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2202      	movs	r2, #2
 8000d20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d76:	d039      	beq.n	8000dec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <HAL_DMA_Init+0x15c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d11a      	bne.n	8000db8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <HAL_DMA_Init+0x168>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f003 031c 	and.w	r3, r3, #28
 8000d8e:	210f      	movs	r1, #15
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4924      	ldr	r1, [pc, #144]	; (8000e28 <HAL_DMA_Init+0x168>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <HAL_DMA_Init+0x168>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6859      	ldr	r1, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da8:	f003 031c 	and.w	r3, r3, #28
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	491d      	ldr	r1, [pc, #116]	; (8000e28 <HAL_DMA_Init+0x168>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
 8000db6:	e019      	b.n	8000dec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_DMA_Init+0x16c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	f003 031c 	and.w	r3, r3, #28
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	4917      	ldr	r1, [pc, #92]	; (8000e2c <HAL_DMA_Init+0x16c>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_DMA_Init+0x16c>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6859      	ldr	r1, [r3, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f003 031c 	and.w	r3, r3, #28
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	4911      	ldr	r1, [pc, #68]	; (8000e2c <HAL_DMA_Init+0x16c>)
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40020407 	.word	0x40020407
 8000e14:	bffdfff8 	.word	0xbffdfff8
 8000e18:	cccccccd 	.word	0xcccccccd
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	bffdfbf8 	.word	0xbffdfbf8
 8000e24:	40020400 	.word	0x40020400
 8000e28:	400200a8 	.word	0x400200a8
 8000e2c:	400204a8 	.word	0x400204a8

08000e30 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d008      	beq.n	8000e5a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e022      	b.n	8000ea0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 020e 	bic.w	r2, r2, #14
 8000e68:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0201 	bic.w	r2, r2, #1
 8000e78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f003 021c 	and.w	r2, r3, #28
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d005      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e029      	b.n	8000f24 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 020e 	bic.w	r2, r2, #14
 8000ede:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	f003 021c 	and.w	r2, r3, #28
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f202 	lsl.w	r2, r1, r2
 8000f02:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	4798      	blx	r3
    }
  }
  return status;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f003 031c 	and.w	r3, r3, #28
 8000f4e:	2204      	movs	r2, #4
 8000f50:	409a      	lsls	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d026      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x7a>
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d021      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0320 	and.w	r3, r3, #32
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d107      	bne.n	8000f82 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0204 	bic.w	r2, r2, #4
 8000f80:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f003 021c 	and.w	r2, r3, #28
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	2104      	movs	r1, #4
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d071      	beq.n	8001082 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000fa6:	e06c      	b.n	8001082 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	f003 031c 	and.w	r3, r3, #28
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d02e      	beq.n	800101a <HAL_DMA_IRQHandler+0xec>
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d029      	beq.n	800101a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10b      	bne.n	8000fec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 020a 	bic.w	r2, r2, #10
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	f003 021c 	and.w	r2, r3, #28
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	2b00      	cmp	r3, #0
 800100e:	d038      	beq.n	8001082 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001018:	e033      	b.n	8001082 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f003 031c 	and.w	r3, r3, #28
 8001022:	2208      	movs	r2, #8
 8001024:	409a      	lsls	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d02a      	beq.n	8001084 <HAL_DMA_IRQHandler+0x156>
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d025      	beq.n	8001084 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 020e 	bic.w	r2, r2, #14
 8001046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	f003 021c 	and.w	r2, r3, #28
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001082:	bf00      	nop
 8001084:	bf00      	nop
}
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e17f      	b.n	800139c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 8171 	beq.w	8001396 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d005      	beq.n	80010cc <HAL_GPIO_Init+0x40>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d130      	bne.n	800112e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	f003 0201 	and.w	r2, r3, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b03      	cmp	r3, #3
 8001138:	d118      	bne.n	800116c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	08db      	lsrs	r3, r3, #3
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	6939      	ldr	r1, [r7, #16]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80ac 	beq.w	8001396 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <HAL_GPIO_Init+0x330>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001242:	4a5e      	ldr	r2, [pc, #376]	; (80013bc <HAL_GPIO_Init+0x330>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6613      	str	r3, [r2, #96]	; 0x60
 800124a:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <HAL_GPIO_Init+0x330>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001256:	4a5a      	ldr	r2, [pc, #360]	; (80013c0 <HAL_GPIO_Init+0x334>)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001280:	d025      	beq.n	80012ce <HAL_GPIO_Init+0x242>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <HAL_GPIO_Init+0x338>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_GPIO_Init+0x23e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4e      	ldr	r2, [pc, #312]	; (80013c8 <HAL_GPIO_Init+0x33c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x23a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4d      	ldr	r2, [pc, #308]	; (80013cc <HAL_GPIO_Init+0x340>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x236>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4c      	ldr	r2, [pc, #304]	; (80013d0 <HAL_GPIO_Init+0x344>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x232>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4b      	ldr	r2, [pc, #300]	; (80013d4 <HAL_GPIO_Init+0x348>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x22e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4a      	ldr	r2, [pc, #296]	; (80013d8 <HAL_GPIO_Init+0x34c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x22a>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e00c      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012b6:	2307      	movs	r3, #7
 80012b8:	e00a      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e008      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012be:	2304      	movs	r3, #4
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x244>
 80012ce:	2300      	movs	r3, #0
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	f002 0203 	and.w	r2, r2, #3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4093      	lsls	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012e0:	4937      	ldr	r1, [pc, #220]	; (80013c0 <HAL_GPIO_Init+0x334>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <HAL_GPIO_Init+0x350>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001312:	4a32      	ldr	r2, [pc, #200]	; (80013dc <HAL_GPIO_Init+0x350>)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_GPIO_Init+0x350>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_GPIO_Init+0x350>)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <HAL_GPIO_Init+0x350>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_GPIO_Init+0x350>)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_GPIO_Init+0x350>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001390:	4a12      	ldr	r2, [pc, #72]	; (80013dc <HAL_GPIO_Init+0x350>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa22 f303 	lsr.w	r3, r2, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f47f ae78 	bne.w	800109c <HAL_GPIO_Init+0x10>
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	48000400 	.word	0x48000400
 80013c8:	48000800 	.word	0x48000800
 80013cc:	48000c00 	.word	0x48000c00
 80013d0:	48001000 	.word	0x48001000
 80013d4:	48001400 	.word	0x48001400
 80013d8:	48001800 	.word	0x48001800
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_PWREx_GetVoltageRange+0x18>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000

0800142c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800143a:	d130      	bne.n	800149e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001448:	d038      	beq.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001452:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001458:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2232      	movs	r2, #50	; 0x32
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	3301      	adds	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001470:	e002      	b.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3b01      	subs	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001484:	d102      	bne.n	800148c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f2      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001498:	d110      	bne.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e00f      	b.n	80014be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014aa:	d007      	beq.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014b4:	4a05      	ldr	r2, [pc, #20]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40007000 	.word	0x40007000
 80014d0:	20000000 	.word	0x20000000
 80014d4:	431bde83 	.word	0x431bde83

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e3ca      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ea:	4b97      	ldr	r3, [pc, #604]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f4:	4b94      	ldr	r3, [pc, #592]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80e4 	beq.w	80016d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <HAL_RCC_OscConfig+0x4a>
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2b0c      	cmp	r3, #12
 8001516:	f040 808b 	bne.w	8001630 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b01      	cmp	r3, #1
 800151e:	f040 8087 	bne.w	8001630 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_RCC_OscConfig+0x62>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e3a2      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1a      	ldr	r2, [r3, #32]
 800153e:	4b82      	ldr	r3, [pc, #520]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_RCC_OscConfig+0x7c>
 800154a:	4b7f      	ldr	r3, [pc, #508]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001552:	e005      	b.n	8001560 <HAL_RCC_OscConfig+0x88>
 8001554:	4b7c      	ldr	r3, [pc, #496]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001560:	4293      	cmp	r3, r2
 8001562:	d223      	bcs.n	80015ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fd55 	bl	8002018 <RCC_SetFlashLatencyFromMSIRange>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e383      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001578:	4b73      	ldr	r3, [pc, #460]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a72      	ldr	r2, [pc, #456]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b70      	ldr	r3, [pc, #448]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	496d      	ldr	r1, [pc, #436]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001596:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	4968      	ldr	r1, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
 80015aa:	e025      	b.n	80015f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ac:	4b66      	ldr	r3, [pc, #408]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a65      	ldr	r2, [pc, #404]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b63      	ldr	r3, [pc, #396]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4960      	ldr	r1, [pc, #384]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ca:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	495b      	ldr	r1, [pc, #364]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fd15 	bl	8002018 <RCC_SetFlashLatencyFromMSIRange>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e343      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015f8:	f000 fc4a 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b52      	ldr	r3, [pc, #328]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	4950      	ldr	r1, [pc, #320]	; (800174c <HAL_RCC_OscConfig+0x274>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
 8001614:	4a4e      	ldr	r2, [pc, #312]	; (8001750 <HAL_RCC_OscConfig+0x278>)
 8001616:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001618:	4b4e      	ldr	r3, [pc, #312]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff f9e1 	bl	80009e4 <HAL_InitTick>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d052      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	e327      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d032      	beq.n	800169e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001638:	4b43      	ldr	r3, [pc, #268]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a42      	ldr	r2, [pc, #264]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001644:	f7ff fa1e 	bl	8000a84 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800164c:	f7ff fa1a 	bl	8000a84 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e310      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800165e:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a36      	ldr	r2, [pc, #216]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4931      	ldr	r1, [pc, #196]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	492c      	ldr	r1, [pc, #176]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e01a      	b.n	80016d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a29      	ldr	r2, [pc, #164]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016aa:	f7ff f9eb 	bl	8000a84 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b2:	f7ff f9e7 	bl	8000a84 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e2dd      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x1da>
 80016d0:	e000      	b.n	80016d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d074      	beq.n	80017ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x21a>
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b0c      	cmp	r3, #12
 80016ea:	d10e      	bne.n	800170a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d10b      	bne.n	800170a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d064      	beq.n	80017c8 <HAL_RCC_OscConfig+0x2f0>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d160      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e2ba      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x24a>
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800171a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e026      	b.n	8001770 <HAL_RCC_OscConfig+0x298>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800172a:	d115      	bne.n	8001758 <HAL_RCC_OscConfig+0x280>
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a05      	ldr	r2, [pc, #20]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 8001732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a02      	ldr	r2, [pc, #8]	; (8001748 <HAL_RCC_OscConfig+0x270>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e014      	b.n	8001770 <HAL_RCC_OscConfig+0x298>
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	080041b4 	.word	0x080041b4
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004
 8001758:	4ba0      	ldr	r3, [pc, #640]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a9f      	ldr	r2, [pc, #636]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 800175e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b9d      	ldr	r3, [pc, #628]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a9c      	ldr	r2, [pc, #624]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 800176a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff f984 	bl	8000a84 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff f980 	bl	8000a84 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e276      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001792:	4b92      	ldr	r3, [pc, #584]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x2a8>
 800179e:	e014      	b.n	80017ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff f970 	bl	8000a84 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff f96c 	bl	8000a84 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e262      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ba:	4b88      	ldr	r3, [pc, #544]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2d0>
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d060      	beq.n	8001898 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x310>
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b0c      	cmp	r3, #12
 80017e0:	d119      	bne.n	8001816 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d116      	bne.n	8001816 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e8:	4b7c      	ldr	r3, [pc, #496]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_OscConfig+0x328>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e23f      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	4973      	ldr	r1, [pc, #460]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001814:	e040      	b.n	8001898 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d023      	beq.n	8001866 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181e:	4b6f      	ldr	r3, [pc, #444]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6e      	ldr	r2, [pc, #440]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff f92b 	bl	8000a84 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff f927 	bl	8000a84 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e21d      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001844:	4b65      	ldr	r3, [pc, #404]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b62      	ldr	r3, [pc, #392]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	495f      	ldr	r1, [pc, #380]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
 8001864:	e018      	b.n	8001898 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a5c      	ldr	r2, [pc, #368]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff f907 	bl	8000a84 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff f903 	bl	8000a84 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1f9      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03c      	beq.n	800191e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ac:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80018ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b2:	4a4a      	ldr	r2, [pc, #296]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff f8e2 	bl	8000a84 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff f8de 	bl	8000a84 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e1d4      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d6:	4b41      	ldr	r3, [pc, #260]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80018d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ef      	beq.n	80018c4 <HAL_RCC_OscConfig+0x3ec>
 80018e4:	e01b      	b.n	800191e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e6:	4b3d      	ldr	r3, [pc, #244]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80018e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ec:	4a3b      	ldr	r2, [pc, #236]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff f8c5 	bl	8000a84 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff f8c1 	bl	8000a84 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e1b7      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001910:	4b32      	ldr	r3, [pc, #200]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ef      	bne.n	80018fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80a6 	beq.w	8001a78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10d      	bne.n	8001958 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	4a26      	ldr	r2, [pc, #152]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001946:	6593      	str	r3, [r2, #88]	; 0x58
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001954:	2301      	movs	r3, #1
 8001956:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_RCC_OscConfig+0x508>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d118      	bne.n	8001996 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_RCC_OscConfig+0x508>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_RCC_OscConfig+0x508>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001970:	f7ff f888 	bl	8000a84 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001978:	f7ff f884 	bl	8000a84 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e17a      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_RCC_OscConfig+0x508>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d108      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4d8>
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80019a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ae:	e029      	b.n	8001a04 <HAL_RCC_OscConfig+0x52c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d115      	bne.n	80019e4 <HAL_RCC_OscConfig+0x50c>
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80019ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ce:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_RCC_OscConfig+0x504>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d8:	e014      	b.n	8001a04 <HAL_RCC_OscConfig+0x52c>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40007000 	.word	0x40007000
 80019e4:	4b9c      	ldr	r3, [pc, #624]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ea:	4a9b      	ldr	r2, [pc, #620]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f4:	4b98      	ldr	r3, [pc, #608]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fa:	4a97      	ldr	r2, [pc, #604]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d016      	beq.n	8001a3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f83a 	bl	8000a84 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff f836 	bl	8000a84 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e12a      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a2a:	4b8b      	ldr	r3, [pc, #556]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ed      	beq.n	8001a14 <HAL_RCC_OscConfig+0x53c>
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f823 	bl	8000a84 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7ff f81f 	bl	8000a84 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e113      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a58:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1ed      	bne.n	8001a42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a66:	7ffb      	ldrb	r3, [r7, #31]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6c:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	4a79      	ldr	r2, [pc, #484]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80fe 	beq.w	8001c7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	f040 80d0 	bne.w	8001c2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a8c:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d130      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d127      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d11f      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001acc:	2a07      	cmp	r2, #7
 8001ace:	bf14      	ite	ne
 8001ad0:	2201      	movne	r2, #1
 8001ad2:	2200      	moveq	r2, #0
 8001ad4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d113      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d06e      	beq.n	8001be0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d069      	beq.n	8001bdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b08:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0ad      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b24:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a4b      	ldr	r2, [pc, #300]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b30:	f7fe ffa8 	bl	8000a84 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe ffa4 	bl	8000a84 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e09a      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4a:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b56:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <HAL_RCC_OscConfig+0x784>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b66:	3a01      	subs	r2, #1
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b70:	0212      	lsls	r2, r2, #8
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b78:	0852      	lsrs	r2, r2, #1
 8001b7a:	3a01      	subs	r2, #1
 8001b7c:	0552      	lsls	r2, r2, #21
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b84:	0852      	lsrs	r2, r2, #1
 8001b86:	3a01      	subs	r2, #1
 8001b88:	0652      	lsls	r2, r2, #25
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b90:	0912      	lsrs	r2, r2, #4
 8001b92:	0452      	lsls	r2, r2, #17
 8001b94:	430a      	orrs	r2, r1
 8001b96:	4930      	ldr	r1, [pc, #192]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2d      	ldr	r2, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bb4:	f7fe ff66 	bl	8000a84 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7fe ff62 	bl	8000a84 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e058      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bda:	e050      	b.n	8001c7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e04f      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d148      	bne.n	8001c7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c04:	f7fe ff3e 	bl	8000a84 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7fe ff3a 	bl	8000a84 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e030      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x734>
 8001c2a:	e028      	b.n	8001c7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d023      	beq.n	8001c7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_RCC_OscConfig+0x780>)
 8001c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7fe ff21 	bl	8000a84 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c44:	e00c      	b.n	8001c60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7fe ff1d 	bl	8000a84 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d905      	bls.n	8001c60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e013      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_OscConfig+0x7b0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1ec      	bne.n	8001c46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_RCC_OscConfig+0x7b0>)
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	4905      	ldr	r1, [pc, #20]	; (8001c88 <HAL_RCC_OscConfig+0x7b0>)
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_OscConfig+0x7b4>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	60cb      	str	r3, [r1, #12]
 8001c78:	e001      	b.n	8001c7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	feeefffc 	.word	0xfeeefffc

08001c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0e7      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b75      	ldr	r3, [pc, #468]	; (8001e7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d910      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4970      	ldr	r1, [pc, #448]	; (8001e7c <HAL_RCC_ClockConfig+0x1ec>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b6e      	ldr	r3, [pc, #440]	; (8001e7c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0cf      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d010      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d908      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4960      	ldr	r1, [pc, #384]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d04c      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d121      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0a6      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d115      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e09a      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d46:	4b4e      	ldr	r3, [pc, #312]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e08e      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d56:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e086      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d66:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f023 0203 	bic.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4943      	ldr	r1, [pc, #268]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d78:	f7fe fe84 	bl	8000a84 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d80:	f7fe fe80 	bl	8000a84 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e06e      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 020c 	and.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1eb      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d010      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d208      	bcs.n	8001dd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	492b      	ldr	r1, [pc, #172]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd6:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <HAL_RCC_ClockConfig+0x1ec>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d210      	bcs.n	8001e06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_RCC_ClockConfig+0x1ec>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 0207 	bic.w	r2, r3, #7
 8001dec:	4923      	ldr	r1, [pc, #140]	; (8001e7c <HAL_RCC_ClockConfig+0x1ec>)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_RCC_ClockConfig+0x1ec>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e036      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d008      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4918      	ldr	r1, [pc, #96]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d009      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4910      	ldr	r1, [pc, #64]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e44:	f000 f824 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	490b      	ldr	r1, [pc, #44]	; (8001e84 <HAL_RCC_ClockConfig+0x1f4>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x1f8>)
 8001e62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1fc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fdbb 	bl	80009e4 <HAL_InitTick>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e72:	7afb      	ldrb	r3, [r7, #11]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	080041b4 	.word	0x080041b4
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9e:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d121      	bne.n	8001f02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d11e      	bne.n	8001f02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ec4:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ed0:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	e005      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001eec:	4a2b      	ldr	r2, [pc, #172]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10d      	bne.n	8001f18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d102      	bne.n	8001f0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	e004      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d134      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d003      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d003      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0xac>
 8001f34:	e005      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f38:	617b      	str	r3, [r7, #20]
      break;
 8001f3a:	e005      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f3e:	617b      	str	r3, [r7, #20]
      break;
 8001f40:	e002      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	617b      	str	r3, [r7, #20]
      break;
 8001f46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	3301      	adds	r3, #1
 8001f54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	fb03 f202 	mul.w	r2, r3, r2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	0e5b      	lsrs	r3, r3, #25
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f88:	69bb      	ldr	r3, [r7, #24]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	080041cc 	.word	0x080041cc
 8001fa0:	00f42400 	.word	0x00f42400
 8001fa4:	007a1200 	.word	0x007a1200

08001fa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000000 	.word	0x20000000

08001fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fc4:	f7ff fff0 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4904      	ldr	r1, [pc, #16]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	080041c4 	.word	0x080041c4

08001fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ff0:	f7ff ffda 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	0adb      	lsrs	r3, r3, #11
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4904      	ldr	r1, [pc, #16]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	080041c4 	.word	0x080041c4

08002018 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002024:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002030:	f7ff f9ee 	bl	8001410 <HAL_PWREx_GetVoltageRange>
 8002034:	6178      	str	r0, [r7, #20]
 8002036:	e014      	b.n	8002062 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002042:	6593      	str	r3, [r2, #88]	; 0x58
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002050:	f7ff f9de 	bl	8001410 <HAL_PWREx_GetVoltageRange>
 8002054:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002068:	d10b      	bne.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b80      	cmp	r3, #128	; 0x80
 800206e:	d919      	bls.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2ba0      	cmp	r3, #160	; 0xa0
 8002074:	d902      	bls.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002076:	2302      	movs	r3, #2
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	e013      	b.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800207c:	2301      	movs	r3, #1
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e010      	b.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d902      	bls.n	800208e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002088:	2303      	movs	r3, #3
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	e00a      	b.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b80      	cmp	r3, #128	; 0x80
 8002092:	d102      	bne.n	800209a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002094:	2302      	movs	r3, #2
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	e004      	b.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b70      	cmp	r3, #112	; 0x70
 800209e:	d101      	bne.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a0:	2301      	movs	r3, #1
 80020a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 0207 	bic.w	r2, r3, #7
 80020ac:	4909      	ldr	r1, [pc, #36]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40022000 	.word	0x40022000

080020d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020e0:	2300      	movs	r3, #0
 80020e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e4:	2300      	movs	r3, #0
 80020e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d041      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020fc:	d02a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002102:	d824      	bhi.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002104:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002108:	d008      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800210a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800210e:	d81e      	bhi.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002118:	d010      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800211a:	e018      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800211c:	4b86      	ldr	r3, [pc, #536]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a85      	ldr	r2, [pc, #532]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002128:	e015      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3304      	adds	r3, #4
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fabb 	bl	80026ac <RCCEx_PLLSAI1_Config>
 8002136:	4603      	mov	r3, r0
 8002138:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800213a:	e00c      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3320      	adds	r3, #32
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fba6 	bl	8002894 <RCCEx_PLLSAI2_Config>
 8002148:	4603      	mov	r3, r0
 800214a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800214c:	e003      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	74fb      	strb	r3, [r7, #19]
      break;
 8002152:	e000      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10b      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800215c:	4b76      	ldr	r3, [pc, #472]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800216a:	4973      	ldr	r1, [pc, #460]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002172:	e001      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d041      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002188:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800218c:	d02a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800218e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002192:	d824      	bhi.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002198:	d008      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800219a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800219e:	d81e      	bhi.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a8:	d010      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021aa:	e018      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021ac:	4b62      	ldr	r3, [pc, #392]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a61      	ldr	r2, [pc, #388]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021b8:	e015      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3304      	adds	r3, #4
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fa73 	bl	80026ac <RCCEx_PLLSAI1_Config>
 80021c6:	4603      	mov	r3, r0
 80021c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ca:	e00c      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3320      	adds	r3, #32
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fb5e 	bl	8002894 <RCCEx_PLLSAI2_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021dc:	e003      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	74fb      	strb	r3, [r7, #19]
      break;
 80021e2:	e000      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10b      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021ec:	4b52      	ldr	r3, [pc, #328]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021fa:	494f      	ldr	r1, [pc, #316]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002202:	e001      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a0 	beq.w	8002356 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800222a:	2300      	movs	r3, #0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00d      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	4b41      	ldr	r3, [pc, #260]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	4a40      	ldr	r2, [pc, #256]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	6593      	str	r3, [r2, #88]	; 0x58
 800223c:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002248:	2301      	movs	r3, #1
 800224a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3a      	ldr	r2, [pc, #232]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002256:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002258:	f7fe fc14 	bl	8000a84 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800225e:	e009      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7fe fc10 	bl	8000a84 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d902      	bls.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	74fb      	strb	r3, [r7, #19]
        break;
 8002272:	e005      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002274:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ef      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d15c      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002286:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002290:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01f      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d019      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022a4:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	4a20      	ldr	r2, [pc, #128]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022d0:	4a19      	ldr	r2, [pc, #100]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7fe fbcf 	bl	8000a84 <HAL_GetTick>
 80022e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e8:	e00b      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fbcb 	bl	8000a84 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d902      	bls.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002300:	e006      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ec      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002326:	4904      	ldr	r1, [pc, #16]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800232e:	e009      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	74bb      	strb	r3, [r7, #18]
 8002334:	e006      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002344:	7c7b      	ldrb	r3, [r7, #17]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b9e      	ldr	r3, [pc, #632]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	4a9d      	ldr	r2, [pc, #628]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002362:	4b98      	ldr	r3, [pc, #608]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f023 0203 	bic.w	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002370:	4994      	ldr	r1, [pc, #592]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002384:	4b8f      	ldr	r3, [pc, #572]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f023 020c 	bic.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002392:	498c      	ldr	r1, [pc, #560]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023a6:	4b87      	ldr	r3, [pc, #540]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	4983      	ldr	r1, [pc, #524]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023c8:	4b7e      	ldr	r3, [pc, #504]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	497b      	ldr	r1, [pc, #492]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ea:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f8:	4972      	ldr	r1, [pc, #456]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800240c:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	496a      	ldr	r1, [pc, #424]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800242e:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	4961      	ldr	r1, [pc, #388]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002450:	4b5c      	ldr	r3, [pc, #368]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245e:	4959      	ldr	r1, [pc, #356]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002472:	4b54      	ldr	r3, [pc, #336]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002480:	4950      	ldr	r1, [pc, #320]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002494:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	4948      	ldr	r1, [pc, #288]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024b6:	4b43      	ldr	r3, [pc, #268]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	493f      	ldr	r1, [pc, #252]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d028      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024d8:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e6:	4937      	ldr	r1, [pc, #220]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f6:	d106      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002502:	60d3      	str	r3, [r2, #12]
 8002504:	e011      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800250e:	d10c      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	2101      	movs	r1, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f8c8 	bl	80026ac <RCCEx_PLLSAI1_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d028      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	491f      	ldr	r1, [pc, #124]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002554:	d106      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002560:	60d3      	str	r3, [r2, #12]
 8002562:	e011      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800256c:	d10c      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	2101      	movs	r1, #1
 8002574:	4618      	mov	r0, r3
 8002576:	f000 f899 	bl	80026ac <RCCEx_PLLSAI1_Config>
 800257a:	4603      	mov	r3, r0
 800257c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02b      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b2:	d109      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a02      	ldr	r2, [pc, #8]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025be:	60d3      	str	r3, [r2, #12]
 80025c0:	e014      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025d0:	d10c      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2101      	movs	r1, #1
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 f867 	bl	80026ac <RCCEx_PLLSAI1_Config>
 80025de:	4603      	mov	r3, r0
 80025e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d02f      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002606:	4928      	ldr	r1, [pc, #160]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002616:	d10d      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3304      	adds	r3, #4
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f844 	bl	80026ac <RCCEx_PLLSAI1_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d014      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	74bb      	strb	r3, [r7, #18]
 8002632:	e011      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800263c:	d10c      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3320      	adds	r3, #32
 8002642:	2102      	movs	r1, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f925 	bl	8002894 <RCCEx_PLLSAI2_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002672:	490d      	ldr	r1, [pc, #52]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002696:	4904      	ldr	r1, [pc, #16]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800269e:	7cbb      	ldrb	r3, [r7, #18]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000

080026ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ba:	4b75      	ldr	r3, [pc, #468]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d018      	beq.n	80026f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026c6:	4b72      	ldr	r3, [pc, #456]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0203 	and.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d10d      	bne.n	80026f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
       ||
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026de:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
       ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d047      	beq.n	8002782 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	e044      	b.n	8002782 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d018      	beq.n	8002732 <RCCEx_PLLSAI1_Config+0x86>
 8002700:	2b03      	cmp	r3, #3
 8002702:	d825      	bhi.n	8002750 <RCCEx_PLLSAI1_Config+0xa4>
 8002704:	2b01      	cmp	r3, #1
 8002706:	d002      	beq.n	800270e <RCCEx_PLLSAI1_Config+0x62>
 8002708:	2b02      	cmp	r3, #2
 800270a:	d009      	beq.n	8002720 <RCCEx_PLLSAI1_Config+0x74>
 800270c:	e020      	b.n	8002750 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800270e:	4b60      	ldr	r3, [pc, #384]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d11d      	bne.n	8002756 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271e:	e01a      	b.n	8002756 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002720:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002728:	2b00      	cmp	r3, #0
 800272a:	d116      	bne.n	800275a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002730:	e013      	b.n	800275a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002732:	4b57      	ldr	r3, [pc, #348]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800274e:	e006      	b.n	800275e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      break;
 8002754:	e004      	b.n	8002760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002756:	bf00      	nop
 8002758:	e002      	b.n	8002760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275a:	bf00      	nop
 800275c:	e000      	b.n	8002760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10d      	bne.n	8002782 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002766:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	430b      	orrs	r3, r1
 800277c:	4944      	ldr	r1, [pc, #272]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277e:	4313      	orrs	r3, r2
 8002780:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d17d      	bne.n	8002884 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002788:	4b41      	ldr	r3, [pc, #260]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a40      	ldr	r2, [pc, #256]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002794:	f7fe f976 	bl	8000a84 <HAL_GetTick>
 8002798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800279a:	e009      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800279c:	f7fe f972 	bl	8000a84 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d902      	bls.n	80027b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	73fb      	strb	r3, [r7, #15]
        break;
 80027ae:	e005      	b.n	80027bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027b0:	4b37      	ldr	r3, [pc, #220]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ef      	bne.n	800279c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d160      	bne.n	8002884 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d111      	bne.n	80027ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c8:	4b31      	ldr	r3, [pc, #196]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6892      	ldr	r2, [r2, #8]
 80027d8:	0211      	lsls	r1, r2, #8
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	0912      	lsrs	r2, r2, #4
 80027e0:	0452      	lsls	r2, r2, #17
 80027e2:	430a      	orrs	r2, r1
 80027e4:	492a      	ldr	r1, [pc, #168]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	610b      	str	r3, [r1, #16]
 80027ea:	e027      	b.n	800283c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d112      	bne.n	8002818 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f2:	4b27      	ldr	r3, [pc, #156]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6892      	ldr	r2, [r2, #8]
 8002802:	0211      	lsls	r1, r2, #8
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6912      	ldr	r2, [r2, #16]
 8002808:	0852      	lsrs	r2, r2, #1
 800280a:	3a01      	subs	r2, #1
 800280c:	0552      	lsls	r2, r2, #21
 800280e:	430a      	orrs	r2, r1
 8002810:	491f      	ldr	r1, [pc, #124]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	610b      	str	r3, [r1, #16]
 8002816:	e011      	b.n	800283c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002820:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	0211      	lsls	r1, r2, #8
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6952      	ldr	r2, [r2, #20]
 800282e:	0852      	lsrs	r2, r2, #1
 8002830:	3a01      	subs	r2, #1
 8002832:	0652      	lsls	r2, r2, #25
 8002834:	430a      	orrs	r2, r1
 8002836:	4916      	ldr	r1, [pc, #88]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002842:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002846:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe f91c 	bl	8000a84 <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800284e:	e009      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002850:	f7fe f918 	bl	8000a84 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d902      	bls.n	8002864 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	73fb      	strb	r3, [r7, #15]
          break;
 8002862:	e005      	b.n	8002870 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ef      	beq.n	8002850 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	4904      	ldr	r1, [pc, #16]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028a2:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d018      	beq.n	80028e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028ae:	4b67      	ldr	r3, [pc, #412]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d10d      	bne.n	80028da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
       ||
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028c6:	4b61      	ldr	r3, [pc, #388]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
       ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d047      	beq.n	800296a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	e044      	b.n	800296a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d018      	beq.n	800291a <RCCEx_PLLSAI2_Config+0x86>
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d825      	bhi.n	8002938 <RCCEx_PLLSAI2_Config+0xa4>
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d002      	beq.n	80028f6 <RCCEx_PLLSAI2_Config+0x62>
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d009      	beq.n	8002908 <RCCEx_PLLSAI2_Config+0x74>
 80028f4:	e020      	b.n	8002938 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028f6:	4b55      	ldr	r3, [pc, #340]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d11d      	bne.n	800293e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002906:	e01a      	b.n	800293e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002908:	4b50      	ldr	r3, [pc, #320]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d116      	bne.n	8002942 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002918:	e013      	b.n	8002942 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800291a:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002926:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002936:	e006      	b.n	8002946 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e004      	b.n	8002948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800293e:	bf00      	nop
 8002940:	e002      	b.n	8002948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002946:	bf00      	nop
    }

    if(status == HAL_OK)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10d      	bne.n	800296a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800294e:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	430b      	orrs	r3, r1
 8002964:	4939      	ldr	r1, [pc, #228]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002966:	4313      	orrs	r3, r2
 8002968:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d167      	bne.n	8002a40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002970:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a35      	ldr	r2, [pc, #212]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297c:	f7fe f882 	bl	8000a84 <HAL_GetTick>
 8002980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002982:	e009      	b.n	8002998 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002984:	f7fe f87e 	bl	8000a84 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d902      	bls.n	8002998 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	73fb      	strb	r3, [r7, #15]
        break;
 8002996:	e005      	b.n	80029a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002998:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ef      	bne.n	8002984 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d14a      	bne.n	8002a40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d111      	bne.n	80029d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029b0:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6892      	ldr	r2, [r2, #8]
 80029c0:	0211      	lsls	r1, r2, #8
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	0912      	lsrs	r2, r2, #4
 80029c8:	0452      	lsls	r2, r2, #17
 80029ca:	430a      	orrs	r2, r1
 80029cc:	491f      	ldr	r1, [pc, #124]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	614b      	str	r3, [r1, #20]
 80029d2:	e011      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6892      	ldr	r2, [r2, #8]
 80029e4:	0211      	lsls	r1, r2, #8
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6912      	ldr	r2, [r2, #16]
 80029ea:	0852      	lsrs	r2, r2, #1
 80029ec:	3a01      	subs	r2, #1
 80029ee:	0652      	lsls	r2, r2, #25
 80029f0:	430a      	orrs	r2, r1
 80029f2:	4916      	ldr	r1, [pc, #88]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe f83e 	bl	8000a84 <HAL_GetTick>
 8002a08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a0a:	e009      	b.n	8002a20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a0c:	f7fe f83a 	bl	8000a84 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d902      	bls.n	8002a20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a1e:	e005      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ef      	beq.n	8002a0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	4904      	ldr	r1, [pc, #16]	; (8002a4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e040      	b.n	8002ae4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fd fe8a 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fc18 	bl	80032c4 <UART_SetConfig>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e022      	b.n	8002ae4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fec4 	bl	8003834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 ff4b 	bl	8003978 <UART_CheckIdleState>
 8002ae2:	4603      	mov	r3, r0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	f040 8082 	bne.w	8002c0a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_UART_Transmit+0x26>
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07a      	b.n	8002c0c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_UART_Transmit+0x38>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e073      	b.n	8002c0c <HAL_UART_Transmit+0x120>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2221      	movs	r2, #33	; 0x21
 8002b38:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b3a:	f7fd ffa3 	bl	8000a84 <HAL_GetTick>
 8002b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	88fa      	ldrh	r2, [r7, #6]
 8002b4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b58:	d108      	bne.n	8002b6c <HAL_UART_Transmit+0x80>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d104      	bne.n	8002b6c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e003      	b.n	8002b74 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b7c:	e02d      	b.n	8002bda <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2180      	movs	r1, #128	; 0x80
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 ff3e 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e039      	b.n	8002c0c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	881a      	ldrh	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002baa:	b292      	uxth	r2, r2
 8002bac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	e008      	b.n	8002bc8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b292      	uxth	r2, r2
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1cb      	bne.n	8002b7e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2140      	movs	r1, #64	; 0x40
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 ff0a 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e005      	b.n	8002c0c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d142      	bne.n	8002cb0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_UART_Receive_IT+0x22>
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e03b      	b.n	8002cb2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_UART_Receive_IT+0x34>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e034      	b.n	8002cb2 <HAL_UART_Receive_IT+0x9e>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_UART_Receive_IT+0xa8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d01f      	beq.n	8002ca0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d018      	beq.n	8002ca0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	69f9      	ldr	r1, [r7, #28]
 8002c92:	6a3a      	ldr	r2, [r7, #32]
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e6      	bne.n	8002c6e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 ff74 	bl	8003b94 <UART_Start_Receive_IT>
 8002cac:	4603      	mov	r3, r0
 8002cae:	e000      	b.n	8002cb2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3728      	adds	r7, #40	; 0x28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40008000 	.word	0x40008000

08002cc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b0ba      	sub	sp, #232	; 0xe8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ce6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002cea:	f640 030f 	movw	r3, #2063	; 0x80f
 8002cee:	4013      	ands	r3, r2
 8002cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002cf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d115      	bne.n	8002d28 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00f      	beq.n	8002d28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 82a6 	beq.w	800326a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
      }
      return;
 8002d26:	e2a0      	b.n	800326a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 8117 	beq.w	8002f60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d42:	4b85      	ldr	r3, [pc, #532]	; (8002f58 <HAL_UART_IRQHandler+0x298>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 810a 	beq.w	8002f60 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d011      	beq.n	8002d7c <HAL_UART_IRQHandler+0xbc>
 8002d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00b      	beq.n	8002d7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d011      	beq.n	8002dac <HAL_UART_IRQHandler+0xec>
 8002d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da2:	f043 0204 	orr.w	r2, r3, #4
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d011      	beq.n	8002ddc <HAL_UART_IRQHandler+0x11c>
 8002db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2204      	movs	r2, #4
 8002dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd2:	f043 0202 	orr.w	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d017      	beq.n	8002e18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2208      	movs	r2, #8
 8002e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e0e:	f043 0208 	orr.w	r2, r3, #8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_UART_IRQHandler+0x18a>
 8002e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00c      	beq.n	8002e4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e40:	f043 0220 	orr.w	r2, r3, #32
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 820c 	beq.w	800326e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d005      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d04f      	beq.n	8002f42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 ff40 	bl	8003d28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb2:	2b40      	cmp	r3, #64	; 0x40
 8002eb4:	d141      	bne.n	8002f3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3308      	adds	r3, #8
 8002ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ec4:	e853 3f00 	ldrex	r3, [r3]
 8002ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3308      	adds	r3, #8
 8002ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1d9      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d013      	beq.n	8002f32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <HAL_UART_IRQHandler+0x29c>)
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd ffc8 	bl	8000eac <HAL_DMA_Abort_IT>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d017      	beq.n	8002f52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f30:	e00f      	b.n	8002f52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f9b0 	bl	8003298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	e00b      	b.n	8002f52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f9ac 	bl	8003298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e007      	b.n	8002f52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f9a8 	bl	8003298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002f50:	e18d      	b.n	800326e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f52:	bf00      	nop
    return;
 8002f54:	e18b      	b.n	800326e <HAL_UART_IRQHandler+0x5ae>
 8002f56:	bf00      	nop
 8002f58:	04000120 	.word	0x04000120
 8002f5c:	08003def 	.word	0x08003def

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	f040 8146 	bne.w	80031f6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 813f 	beq.w	80031f6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8138 	beq.w	80031f6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	f040 80b4 	bne.w	8003106 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002faa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 815f 	beq.w	8003272 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	f080 8157 	bcs.w	8003272 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 8085 	bne.w	80030ea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800300a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800300e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003012:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003016:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800301a:	e841 2300 	strex	r3, r2, [r1]
 800301e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1da      	bne.n	8002fe0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3308      	adds	r3, #8
 8003030:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800303a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3308      	adds	r3, #8
 800304a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800304e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003052:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003056:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e1      	bne.n	800302a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3308      	adds	r3, #8
 800306c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003070:	e853 3f00 	ldrex	r3, [r3]
 8003074:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800307c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3308      	adds	r3, #8
 8003086:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800308a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800308c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003090:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003092:	e841 2300 	strex	r3, r2, [r1]
 8003096:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1e3      	bne.n	8003066 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ba:	f023 0310 	bic.w	r3, r3, #16
 80030be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80030ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e4      	bne.n	80030aa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd fea3 	bl	8000e30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8d4 	bl	80032ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003104:	e0b5      	b.n	8003272 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003112:	b29b      	uxth	r3, r3
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80a7 	beq.w	8003276 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80a2 	beq.w	8003276 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	e853 3f00 	ldrex	r3, [r3]
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003142:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
 8003156:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800315a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e4      	bne.n	8003132 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3308      	adds	r3, #8
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	623b      	str	r3, [r7, #32]
   return(result);
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3308      	adds	r3, #8
 8003188:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800318c:	633a      	str	r2, [r7, #48]	; 0x30
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e3      	bne.n	8003168 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	e853 3f00 	ldrex	r3, [r3]
 80031be:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0310 	bic.w	r3, r3, #16
 80031c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	69b9      	ldr	r1, [r7, #24]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	617b      	str	r3, [r7, #20]
   return(result);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e4      	bne.n	80031b2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031ec:	4619      	mov	r1, r3
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f85c 	bl	80032ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031f4:	e03f      	b.n	8003276 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00e      	beq.n	8003220 <HAL_UART_IRQHandler+0x560>
 8003202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003216:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 ff88 	bl	800412e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800321e:	e02d      	b.n	800327c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800322c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01c      	beq.n	800327a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
    }
    return;
 8003248:	e017      	b.n	800327a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d012      	beq.n	800327c <HAL_UART_IRQHandler+0x5bc>
 8003256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fdd9 	bl	8003e1a <UART_EndTransmit_IT>
    return;
 8003268:	e008      	b.n	800327c <HAL_UART_IRQHandler+0x5bc>
      return;
 800326a:	bf00      	nop
 800326c:	e006      	b.n	800327c <HAL_UART_IRQHandler+0x5bc>
    return;
 800326e:	bf00      	nop
 8003270:	e004      	b.n	800327c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003272:	bf00      	nop
 8003274:	e002      	b.n	800327c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <HAL_UART_IRQHandler+0x5bc>
    return;
 800327a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800327c:	37e8      	adds	r7, #232	; 0xe8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop

08003284 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c8:	b08a      	sub	sp, #40	; 0x28
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	431a      	orrs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4ba4      	ldr	r3, [pc, #656]	; (8003584 <UART_SetConfig+0x2c0>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a99      	ldr	r2, [pc, #612]	; (8003588 <UART_SetConfig+0x2c4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332c:	4313      	orrs	r3, r2
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a90      	ldr	r2, [pc, #576]	; (800358c <UART_SetConfig+0x2c8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d126      	bne.n	800339c <UART_SetConfig+0xd8>
 800334e:	4b90      	ldr	r3, [pc, #576]	; (8003590 <UART_SetConfig+0x2cc>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b03      	cmp	r3, #3
 800335a:	d81b      	bhi.n	8003394 <UART_SetConfig+0xd0>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <UART_SetConfig+0xa0>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003375 	.word	0x08003375
 8003368:	08003385 	.word	0x08003385
 800336c:	0800337d 	.word	0x0800337d
 8003370:	0800338d 	.word	0x0800338d
 8003374:	2301      	movs	r3, #1
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337a:	e116      	b.n	80035aa <UART_SetConfig+0x2e6>
 800337c:	2302      	movs	r3, #2
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003382:	e112      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003384:	2304      	movs	r3, #4
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338a:	e10e      	b.n	80035aa <UART_SetConfig+0x2e6>
 800338c:	2308      	movs	r3, #8
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003392:	e10a      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003394:	2310      	movs	r3, #16
 8003396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339a:	e106      	b.n	80035aa <UART_SetConfig+0x2e6>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a7c      	ldr	r2, [pc, #496]	; (8003594 <UART_SetConfig+0x2d0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d138      	bne.n	8003418 <UART_SetConfig+0x154>
 80033a6:	4b7a      	ldr	r3, [pc, #488]	; (8003590 <UART_SetConfig+0x2cc>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d82d      	bhi.n	8003410 <UART_SetConfig+0x14c>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <UART_SetConfig+0xf8>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033f1 	.word	0x080033f1
 80033c0:	08003411 	.word	0x08003411
 80033c4:	08003411 	.word	0x08003411
 80033c8:	08003411 	.word	0x08003411
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003411 	.word	0x08003411
 80033d4:	08003411 	.word	0x08003411
 80033d8:	08003411 	.word	0x08003411
 80033dc:	080033f9 	.word	0x080033f9
 80033e0:	08003411 	.word	0x08003411
 80033e4:	08003411 	.word	0x08003411
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003409 	.word	0x08003409
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f6:	e0d8      	b.n	80035aa <UART_SetConfig+0x2e6>
 80033f8:	2302      	movs	r3, #2
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fe:	e0d4      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003400:	2304      	movs	r3, #4
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003406:	e0d0      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003408:	2308      	movs	r3, #8
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340e:	e0cc      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003410:	2310      	movs	r3, #16
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003416:	e0c8      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5e      	ldr	r2, [pc, #376]	; (8003598 <UART_SetConfig+0x2d4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d125      	bne.n	800346e <UART_SetConfig+0x1aa>
 8003422:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <UART_SetConfig+0x2cc>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800342c:	2b30      	cmp	r3, #48	; 0x30
 800342e:	d016      	beq.n	800345e <UART_SetConfig+0x19a>
 8003430:	2b30      	cmp	r3, #48	; 0x30
 8003432:	d818      	bhi.n	8003466 <UART_SetConfig+0x1a2>
 8003434:	2b20      	cmp	r3, #32
 8003436:	d00a      	beq.n	800344e <UART_SetConfig+0x18a>
 8003438:	2b20      	cmp	r3, #32
 800343a:	d814      	bhi.n	8003466 <UART_SetConfig+0x1a2>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <UART_SetConfig+0x182>
 8003440:	2b10      	cmp	r3, #16
 8003442:	d008      	beq.n	8003456 <UART_SetConfig+0x192>
 8003444:	e00f      	b.n	8003466 <UART_SetConfig+0x1a2>
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344c:	e0ad      	b.n	80035aa <UART_SetConfig+0x2e6>
 800344e:	2302      	movs	r3, #2
 8003450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003454:	e0a9      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003456:	2304      	movs	r3, #4
 8003458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345c:	e0a5      	b.n	80035aa <UART_SetConfig+0x2e6>
 800345e:	2308      	movs	r3, #8
 8003460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003464:	e0a1      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003466:	2310      	movs	r3, #16
 8003468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346c:	e09d      	b.n	80035aa <UART_SetConfig+0x2e6>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a4a      	ldr	r2, [pc, #296]	; (800359c <UART_SetConfig+0x2d8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d125      	bne.n	80034c4 <UART_SetConfig+0x200>
 8003478:	4b45      	ldr	r3, [pc, #276]	; (8003590 <UART_SetConfig+0x2cc>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003482:	2bc0      	cmp	r3, #192	; 0xc0
 8003484:	d016      	beq.n	80034b4 <UART_SetConfig+0x1f0>
 8003486:	2bc0      	cmp	r3, #192	; 0xc0
 8003488:	d818      	bhi.n	80034bc <UART_SetConfig+0x1f8>
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d00a      	beq.n	80034a4 <UART_SetConfig+0x1e0>
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d814      	bhi.n	80034bc <UART_SetConfig+0x1f8>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <UART_SetConfig+0x1d8>
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d008      	beq.n	80034ac <UART_SetConfig+0x1e8>
 800349a:	e00f      	b.n	80034bc <UART_SetConfig+0x1f8>
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a2:	e082      	b.n	80035aa <UART_SetConfig+0x2e6>
 80034a4:	2302      	movs	r3, #2
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034aa:	e07e      	b.n	80035aa <UART_SetConfig+0x2e6>
 80034ac:	2304      	movs	r3, #4
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b2:	e07a      	b.n	80035aa <UART_SetConfig+0x2e6>
 80034b4:	2308      	movs	r3, #8
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ba:	e076      	b.n	80035aa <UART_SetConfig+0x2e6>
 80034bc:	2310      	movs	r3, #16
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e072      	b.n	80035aa <UART_SetConfig+0x2e6>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a35      	ldr	r2, [pc, #212]	; (80035a0 <UART_SetConfig+0x2dc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d12a      	bne.n	8003524 <UART_SetConfig+0x260>
 80034ce:	4b30      	ldr	r3, [pc, #192]	; (8003590 <UART_SetConfig+0x2cc>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034dc:	d01a      	beq.n	8003514 <UART_SetConfig+0x250>
 80034de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e2:	d81b      	bhi.n	800351c <UART_SetConfig+0x258>
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e8:	d00c      	beq.n	8003504 <UART_SetConfig+0x240>
 80034ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ee:	d815      	bhi.n	800351c <UART_SetConfig+0x258>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <UART_SetConfig+0x238>
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f8:	d008      	beq.n	800350c <UART_SetConfig+0x248>
 80034fa:	e00f      	b.n	800351c <UART_SetConfig+0x258>
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003502:	e052      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003504:	2302      	movs	r3, #2
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350a:	e04e      	b.n	80035aa <UART_SetConfig+0x2e6>
 800350c:	2304      	movs	r3, #4
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003512:	e04a      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003514:	2308      	movs	r3, #8
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351a:	e046      	b.n	80035aa <UART_SetConfig+0x2e6>
 800351c:	2310      	movs	r3, #16
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003522:	e042      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a17      	ldr	r2, [pc, #92]	; (8003588 <UART_SetConfig+0x2c4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d13a      	bne.n	80035a4 <UART_SetConfig+0x2e0>
 800352e:	4b18      	ldr	r3, [pc, #96]	; (8003590 <UART_SetConfig+0x2cc>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003538:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800353c:	d01a      	beq.n	8003574 <UART_SetConfig+0x2b0>
 800353e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003542:	d81b      	bhi.n	800357c <UART_SetConfig+0x2b8>
 8003544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003548:	d00c      	beq.n	8003564 <UART_SetConfig+0x2a0>
 800354a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354e:	d815      	bhi.n	800357c <UART_SetConfig+0x2b8>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <UART_SetConfig+0x298>
 8003554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003558:	d008      	beq.n	800356c <UART_SetConfig+0x2a8>
 800355a:	e00f      	b.n	800357c <UART_SetConfig+0x2b8>
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003562:	e022      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003564:	2302      	movs	r3, #2
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356a:	e01e      	b.n	80035aa <UART_SetConfig+0x2e6>
 800356c:	2304      	movs	r3, #4
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003572:	e01a      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003574:	2308      	movs	r3, #8
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e016      	b.n	80035aa <UART_SetConfig+0x2e6>
 800357c:	2310      	movs	r3, #16
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e012      	b.n	80035aa <UART_SetConfig+0x2e6>
 8003584:	efff69f3 	.word	0xefff69f3
 8003588:	40008000 	.word	0x40008000
 800358c:	40013800 	.word	0x40013800
 8003590:	40021000 	.word	0x40021000
 8003594:	40004400 	.word	0x40004400
 8003598:	40004800 	.word	0x40004800
 800359c:	40004c00 	.word	0x40004c00
 80035a0:	40005000 	.word	0x40005000
 80035a4:	2310      	movs	r3, #16
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a9f      	ldr	r2, [pc, #636]	; (800382c <UART_SetConfig+0x568>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d17a      	bne.n	80036aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d824      	bhi.n	8003606 <UART_SetConfig+0x342>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <UART_SetConfig+0x300>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035e9 	.word	0x080035e9
 80035c8:	08003607 	.word	0x08003607
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	08003607 	.word	0x08003607
 80035d4:	080035f7 	.word	0x080035f7
 80035d8:	08003607 	.word	0x08003607
 80035dc:	08003607 	.word	0x08003607
 80035e0:	08003607 	.word	0x08003607
 80035e4:	080035ff 	.word	0x080035ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e8:	f7fe fcea 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 80035ec:	61f8      	str	r0, [r7, #28]
        break;
 80035ee:	e010      	b.n	8003612 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f0:	4b8f      	ldr	r3, [pc, #572]	; (8003830 <UART_SetConfig+0x56c>)
 80035f2:	61fb      	str	r3, [r7, #28]
        break;
 80035f4:	e00d      	b.n	8003612 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f6:	f7fe fc4b 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 80035fa:	61f8      	str	r0, [r7, #28]
        break;
 80035fc:	e009      	b.n	8003612 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003602:	61fb      	str	r3, [r7, #28]
        break;
 8003604:	e005      	b.n	8003612 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003610:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80fb 	beq.w	8003810 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	429a      	cmp	r2, r3
 8003628:	d305      	bcc.n	8003636 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	429a      	cmp	r2, r3
 8003634:	d903      	bls.n	800363e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800363c:	e0e8      	b.n	8003810 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2200      	movs	r2, #0
 8003642:	461c      	mov	r4, r3
 8003644:	4615      	mov	r5, r2
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	022b      	lsls	r3, r5, #8
 8003650:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003654:	0222      	lsls	r2, r4, #8
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	6849      	ldr	r1, [r1, #4]
 800365a:	0849      	lsrs	r1, r1, #1
 800365c:	2000      	movs	r0, #0
 800365e:	4688      	mov	r8, r1
 8003660:	4681      	mov	r9, r0
 8003662:	eb12 0a08 	adds.w	sl, r2, r8
 8003666:	eb43 0b09 	adc.w	fp, r3, r9
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003678:	4650      	mov	r0, sl
 800367a:	4659      	mov	r1, fp
 800367c:	f7fc fda4 	bl	80001c8 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4613      	mov	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800368e:	d308      	bcc.n	80036a2 <UART_SetConfig+0x3de>
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003696:	d204      	bcs.n	80036a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	e0b6      	b.n	8003810 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036a8:	e0b2      	b.n	8003810 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b2:	d15e      	bne.n	8003772 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80036b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d828      	bhi.n	800370e <UART_SetConfig+0x44a>
 80036bc:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <UART_SetConfig+0x400>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036e9 	.word	0x080036e9
 80036c8:	080036f1 	.word	0x080036f1
 80036cc:	080036f9 	.word	0x080036f9
 80036d0:	0800370f 	.word	0x0800370f
 80036d4:	080036ff 	.word	0x080036ff
 80036d8:	0800370f 	.word	0x0800370f
 80036dc:	0800370f 	.word	0x0800370f
 80036e0:	0800370f 	.word	0x0800370f
 80036e4:	08003707 	.word	0x08003707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e8:	f7fe fc6a 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 80036ec:	61f8      	str	r0, [r7, #28]
        break;
 80036ee:	e014      	b.n	800371a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7fe fc7c 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 80036f4:	61f8      	str	r0, [r7, #28]
        break;
 80036f6:	e010      	b.n	800371a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f8:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <UART_SetConfig+0x56c>)
 80036fa:	61fb      	str	r3, [r7, #28]
        break;
 80036fc:	e00d      	b.n	800371a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fe:	f7fe fbc7 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8003702:	61f8      	str	r0, [r7, #28]
        break;
 8003704:	e009      	b.n	800371a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370a:	61fb      	str	r3, [r7, #28]
        break;
 800370c:	e005      	b.n	800371a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d077      	beq.n	8003810 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005a      	lsls	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	085b      	lsrs	r3, r3, #1
 800372a:	441a      	add	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b0f      	cmp	r3, #15
 800373a:	d916      	bls.n	800376a <UART_SetConfig+0x4a6>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003742:	d212      	bcs.n	800376a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f023 030f 	bic.w	r3, r3, #15
 800374c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	b29b      	uxth	r3, r3
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	b29a      	uxth	r2, r3
 800375a:	8afb      	ldrh	r3, [r7, #22]
 800375c:	4313      	orrs	r3, r2
 800375e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	8afa      	ldrh	r2, [r7, #22]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	e052      	b.n	8003810 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003770:	e04e      	b.n	8003810 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003772:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003776:	2b08      	cmp	r3, #8
 8003778:	d827      	bhi.n	80037ca <UART_SetConfig+0x506>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <UART_SetConfig+0x4bc>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037ad 	.word	0x080037ad
 8003788:	080037b5 	.word	0x080037b5
 800378c:	080037cb 	.word	0x080037cb
 8003790:	080037bb 	.word	0x080037bb
 8003794:	080037cb 	.word	0x080037cb
 8003798:	080037cb 	.word	0x080037cb
 800379c:	080037cb 	.word	0x080037cb
 80037a0:	080037c3 	.word	0x080037c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a4:	f7fe fc0c 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 80037a8:	61f8      	str	r0, [r7, #28]
        break;
 80037aa:	e014      	b.n	80037d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7fe fc1e 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 80037b0:	61f8      	str	r0, [r7, #28]
        break;
 80037b2:	e010      	b.n	80037d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <UART_SetConfig+0x56c>)
 80037b6:	61fb      	str	r3, [r7, #28]
        break;
 80037b8:	e00d      	b.n	80037d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ba:	f7fe fb69 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 80037be:	61f8      	str	r0, [r7, #28]
        break;
 80037c0:	e009      	b.n	80037d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c6:	61fb      	str	r3, [r7, #28]
        break;
 80037c8:	e005      	b.n	80037d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037d4:	bf00      	nop
    }

    if (pclk != 0U)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d019      	beq.n	8003810 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	085a      	lsrs	r2, r3, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	441a      	add	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b0f      	cmp	r3, #15
 80037f4:	d909      	bls.n	800380a <UART_SetConfig+0x546>
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d205      	bcs.n	800380a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60da      	str	r2, [r3, #12]
 8003808:	e002      	b.n	8003810 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800381c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	; 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382a:	bf00      	nop
 800382c:	40008000 	.word	0x40008000
 8003830:	00f42400 	.word	0x00f42400

08003834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01a      	beq.n	800394a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003932:	d10a      	bne.n	800394a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af02      	add	r7, sp, #8
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003988:	f7fd f87c 	bl	8000a84 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d10e      	bne.n	80039ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800399c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f82d 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e023      	b.n	8003a02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d10e      	bne.n	80039e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f817 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e00d      	b.n	8003a02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b09c      	sub	sp, #112	; 0x70
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1a:	e0a5      	b.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	f000 80a1 	beq.w	8003b68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a26:	f7fd f82d 	bl	8000a84 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d13e      	bne.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a50:	667b      	str	r3, [r7, #100]	; 0x64
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e6      	bne.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	663b      	str	r3, [r7, #96]	; 0x60
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e5      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e067      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d04f      	beq.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad6:	d147      	bne.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
 8003b02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e6      	bne.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	613b      	str	r3, [r7, #16]
   return(result);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b34:	623a      	str	r2, [r7, #32]
 8003b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	69f9      	ldr	r1, [r7, #28]
 8003b3a:	6a3a      	ldr	r2, [r7, #32]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e010      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4013      	ands	r3, r2
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	f43f af4a 	beq.w	8003a1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3770      	adds	r7, #112	; 0x70
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b097      	sub	sp, #92	; 0x5c
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	88fa      	ldrh	r2, [r7, #6]
 8003bac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d10e      	bne.n	8003be6 <UART_Start_Receive_IT+0x52>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <UART_Start_Receive_IT+0x48>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003bd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bda:	e02d      	b.n	8003c38 <UART_Start_Receive_IT+0xa4>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	22ff      	movs	r2, #255	; 0xff
 8003be0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003be4:	e028      	b.n	8003c38 <UART_Start_Receive_IT+0xa4>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <UART_Start_Receive_IT+0x76>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <UART_Start_Receive_IT+0x6c>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	22ff      	movs	r2, #255	; 0xff
 8003bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bfe:	e01b      	b.n	8003c38 <UART_Start_Receive_IT+0xa4>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	227f      	movs	r2, #127	; 0x7f
 8003c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c08:	e016      	b.n	8003c38 <UART_Start_Receive_IT+0xa4>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c12:	d10d      	bne.n	8003c30 <UART_Start_Receive_IT+0x9c>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <UART_Start_Receive_IT+0x92>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	227f      	movs	r2, #127	; 0x7f
 8003c20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c24:	e008      	b.n	8003c38 <UART_Start_Receive_IT+0xa4>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	223f      	movs	r2, #63	; 0x3f
 8003c2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c2e:	e003      	b.n	8003c38 <UART_Start_Receive_IT+0xa4>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2222      	movs	r2, #34	; 0x22
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3308      	adds	r3, #8
 8003c64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c66:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c82:	d107      	bne.n	8003c94 <UART_Start_Receive_IT+0x100>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <UART_Start_Receive_IT+0x18c>)
 8003c90:	665a      	str	r2, [r3, #100]	; 0x64
 8003c92:	e002      	b.n	8003c9a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a23      	ldr	r2, [pc, #140]	; (8003d24 <UART_Start_Receive_IT+0x190>)
 8003c98:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d019      	beq.n	8003cde <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e6      	bne.n	8003caa <UART_Start_Receive_IT+0x116>
 8003cdc:	e018      	b.n	8003d10 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	613b      	str	r3, [r7, #16]
   return(result);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f043 0320 	orr.w	r3, r3, #32
 8003cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfc:	623b      	str	r3, [r7, #32]
 8003cfe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	69f9      	ldr	r1, [r7, #28]
 8003d02:	6a3a      	ldr	r2, [r7, #32]
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e6      	bne.n	8003cde <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	375c      	adds	r7, #92	; 0x5c
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	08003fcf 	.word	0x08003fcf
 8003d24:	08003e6f 	.word	0x08003e6f

08003d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b095      	sub	sp, #84	; 0x54
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e6      	bne.n	8003d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3308      	adds	r3, #8
 8003d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e5      	bne.n	8003d62 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d118      	bne.n	8003dd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f023 0310 	bic.w	r3, r3, #16
 8003db2:	647b      	str	r3, [r7, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6979      	ldr	r1, [r7, #20]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e6      	bne.n	8003d9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003de2:	bf00      	nop
 8003de4:	3754      	adds	r7, #84	; 0x54
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fa43 	bl	8003298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b088      	sub	sp, #32
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6979      	ldr	r1, [r7, #20]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e6      	bne.n	8003e22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff fa0f 	bl	8003284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e66:	bf00      	nop
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b096      	sub	sp, #88	; 0x58
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e84:	2b22      	cmp	r3, #34	; 0x22
 8003e86:	f040 8094 	bne.w	8003fb2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e90:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e94:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e98:	b2d9      	uxtb	r1, r3
 8003e9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d179      	bne.n	8003fc6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e6      	bne.n	8003ed2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3308      	adds	r3, #8
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	623b      	str	r3, [r7, #32]
   return(result);
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3308      	adds	r3, #8
 8003f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f24:	633a      	str	r2, [r7, #48]	; 0x30
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e5      	bne.n	8003f04 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d12e      	bne.n	8003faa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0310 	bic.w	r3, r3, #16
 8003f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	69b9      	ldr	r1, [r7, #24]
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e6      	bne.n	8003f52 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d103      	bne.n	8003f9a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2210      	movs	r2, #16
 8003f98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff f982 	bl	80032ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fa8:	e00d      	b.n	8003fc6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fc fa8a 	bl	80004c4 <HAL_UART_RxCpltCallback>
}
 8003fb0:	e009      	b.n	8003fc6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	8b1b      	ldrh	r3, [r3, #24]
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0208 	orr.w	r2, r2, #8
 8003fc2:	b292      	uxth	r2, r2
 8003fc4:	831a      	strh	r2, [r3, #24]
}
 8003fc6:	bf00      	nop
 8003fc8:	3758      	adds	r7, #88	; 0x58
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b096      	sub	sp, #88	; 0x58
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fdc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe4:	2b22      	cmp	r3, #34	; 0x22
 8003fe6:	f040 8094 	bne.w	8004112 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ff0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ffa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003ffe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004002:	4013      	ands	r3, r2
 8004004:	b29a      	uxth	r2, r3
 8004006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004008:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	1c9a      	adds	r2, r3, #2
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d179      	bne.n	8004126 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004050:	643b      	str	r3, [r7, #64]	; 0x40
 8004052:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e6      	bne.n	8004032 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	61fb      	str	r3, [r7, #28]
   return(result);
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	64bb      	str	r3, [r7, #72]	; 0x48
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004084:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800408a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e5      	bne.n	8004064 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d12e      	bne.n	800410a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	60bb      	str	r3, [r7, #8]
   return(result);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f023 0310 	bic.w	r3, r3, #16
 80040c6:	647b      	str	r3, [r7, #68]	; 0x44
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6979      	ldr	r1, [r7, #20]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	613b      	str	r3, [r7, #16]
   return(result);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e6      	bne.n	80040b2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d103      	bne.n	80040fa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2210      	movs	r2, #16
 80040f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff f8d2 	bl	80032ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004108:	e00d      	b.n	8004126 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc f9da 	bl	80004c4 <HAL_UART_RxCpltCallback>
}
 8004110:	e009      	b.n	8004126 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	8b1b      	ldrh	r3, [r3, #24]
 8004118:	b29a      	uxth	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0208 	orr.w	r2, r2, #8
 8004122:	b292      	uxth	r2, r2
 8004124:	831a      	strh	r2, [r3, #24]
}
 8004126:	bf00      	nop
 8004128:	3758      	adds	r7, #88	; 0x58
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <memset>:
 8004142:	4402      	add	r2, r0
 8004144:	4603      	mov	r3, r0
 8004146:	4293      	cmp	r3, r2
 8004148:	d100      	bne.n	800414c <memset+0xa>
 800414a:	4770      	bx	lr
 800414c:	f803 1b01 	strb.w	r1, [r3], #1
 8004150:	e7f9      	b.n	8004146 <memset+0x4>
	...

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4d0d      	ldr	r5, [pc, #52]	; (800418c <__libc_init_array+0x38>)
 8004158:	4c0d      	ldr	r4, [pc, #52]	; (8004190 <__libc_init_array+0x3c>)
 800415a:	1b64      	subs	r4, r4, r5
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	2600      	movs	r6, #0
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	4d0b      	ldr	r5, [pc, #44]	; (8004194 <__libc_init_array+0x40>)
 8004166:	4c0c      	ldr	r4, [pc, #48]	; (8004198 <__libc_init_array+0x44>)
 8004168:	f000 f818 	bl	800419c <_init>
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	2600      	movs	r6, #0
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	08004204 	.word	0x08004204
 8004190:	08004204 	.word	0x08004204
 8004194:	08004204 	.word	0x08004204
 8004198:	08004208 	.word	0x08004208

0800419c <_init>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr

080041a8 <_fini>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr
